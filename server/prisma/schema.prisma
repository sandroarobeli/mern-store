// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// EVERY TIME THERE IS A CHENGE TO THIS PRISMA FILE: 
// SHUT DOWN THE SERVER AND DO: npx prisma generate
model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String @unique
  password  String
  isAdmin   Boolean @default(false)
  orders Order[] 
  comments Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String 
  slug        String @unique
  category    String
  image       String
  price       Float
  brand       String
  rating      Float @default(0)
  reviews     Int @default(0)
  comments Comment[]
  inStock     Int @default(0)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt   
}

model Comment {
  id                              String @id @default(auto()) @map("_id") @db.ObjectId
  product Product                 @relation(fields: [productId], references: [id])
  productId                       String  @db.ObjectId
  author User                     @relation(fields: [authorId], references: [id])
  authorId                        String  @db.ObjectId 
  authorName                      String 
  rating                          Float @default(0)  
  content                         String?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
}


// By default, when a query returns records (as opposed to a count), the result includes the default selection set:

// All scalar fields defined in the Prisma schema (including enums)
// None of the relations

// Use SELECT  to return specific fields - you can also use a nested select to include relation fields
// Use INCLUDE  to explicitly include relations
model Order {
  id                              String @id @default(auto()) @map("_id") @db.ObjectId
  orderItems OrderItem[] 
  shippingAddress ShippingAddress
  paymentMethod                   String
  itemsTotal                      Float
  taxTotal                        Float
  shippingTotal                   Float
  grandTotal                      Float
  isPaid                          Boolean @default(false)
  isDelivered                     Boolean @default(false)
  paidAt                          DateTime? // @default(now()) 
  deliveredAt                     DateTime? // @default("2023-12-31T14:21:00+02:00")
  paymentResult PaymentResult
  owner User                      @relation(fields: [ownerId], references: [id])
  ownerId                         String  @db.ObjectId 
  createdAt                       DateTime @default(now())
}

type OrderItem {
  name     String 
  quantity Int
  image    String
  price    Float
}

type ShippingAddress {
  fullName String
  address  String
  city     String
  state    String
  zip      String
  phone    String
}

type PaymentResult {
  paypalId String
  status String
  email_address String 
}

